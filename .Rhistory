dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
wandering <- function (n, lambda, x) { # n = number of 5-min iterations to test, lambda is strength coeff, x is extra distance moved
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1; this is to initiate loop with something other than 0
dist_long <- (dist_long + rnorm(1,0))
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0) + (lambda*x))
dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
wandering <- function (n, lambda, x) { # n = number of 5-min iterations to test, lambda is strength coeff, x is extra distance moved
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1; this is to initiate loop with something other than 0
dist_long <- (dist_long + rnorm(1,0))
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0) + (lambda*x))
dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
wandering <- function (n, lambda, x) { # n = number of 5-min iterations to test, lambda is strength coeff, x is extra distance moved
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1; this is to initiate loop with something other than 0
dist_long <- (dist_long + rnorm(1,0))
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0) + (lambda*x))
dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
wandering <- function (n, lambda, x) { # n = number of 5-min iterations to test, lambda is strength coeff, x is extra distance moved
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1; this is to initiate loop with something other than 0
dist_long <- (dist_long + rnorm(1,0))
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0) + (lambda*x))
dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
wandering <- function (n, lambda, x) { # n = number of 5-min iterations to test, lambda is strength coeff, x is extra distance moved
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1; this is to initiate loop with something other than 0
dist_long <- (dist_long + rnorm(1,0))
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0) + (lambda*x))
dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,0,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,0,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,0,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,0,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,0,20)
avg_time <- avg_cliff_time(100,0,0,20)
avg_time <- avg_cliff_time(100,0,0,20)
avg_time <- avg_cliff_time(100,0,0,20)
wandering <- function (n, lambda, x) { # n = number of 5-min iterations to test, lambda is strength coeff, x is extra distance moved
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1; this is to initiate loop with something other than 0
dist_long <- (dist_long + rnorm(1,0))
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0) + (lambda*x))
dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,0,0,20)
mean(avg_time, na.rm = TRUE)
wandering <- function (n, lambda, x) { # n = number of 5-min iterations to test, lambda is strength coeff, x is extra distance moved
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1; this is to initiate loop with something other than 0
dist_long <- (dist_long + rnorm(1,0))
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0) + (lambda*x))
dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,0,0,20)
mean(avg_time, na.rm = TRUE)
wandering <- function (n, lambda, x) { # n = number of 5-min iterations to test, lambda is strength coeff, x is extra distance moved
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1; this is to initiate loop with something other than 0
dist_long <- (dist_long + rnorm(1,0))
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0) + (lambda*x))
dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,0,0,20)
mean(avg_time, na.rm = TRUE)
wandering <- function (n, lambda, x) { # n = number of 5-min iterations to test, lambda is strength coeff, x is extra distance moved
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1; this is to initiate loop with something other than 0
dist_long <- (dist_long + rnorm(1,0))
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0) + (lambda*x))
dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,0,0,20)
mean(avg_time, na.rm = TRUE)
wandering <- function (n, lambda, x) { # n = number of 5-min iterations to test, lambda is strength coeff, x is extra distance moved
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1; this is to initiate loop with something other than 0
dist_long <- (dist_long + rnorm(1,0))
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0) + (lambda*x))
dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,0,0,20)
mean(avg_time, na.rm = TRUE)
wandering <- function (n, lambda, x) { # n = number of 5-min iterations to test, lambda is strength coeff, x is extra distance moved
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1; this is to initiate loop with something other than 0
dist_long <- (dist_long + rnorm(1,0))
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0) + (lambda*x))
dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,0,0,20)
mean(avg_time, na.rm = TRUE)
wandering <- function (n, lambda, x) { # n = number of 5-min iterations to test, lambda is strength coeff, x is extra distance moved
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1; this is to initiate loop with something other than 0
dist_long <- (dist_long + rnorm(1,0))
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0) + (lambda*x))
dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,0,0,20)
mean(avg_time, na.rm = TRUE)
wandering <- function (n, lambda, x) { # n = number of 5-min iterations to test, lambda is strength coeff, x is extra distance moved
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1; this is to initiate loop with something other than 0
dist_long <- (dist_long + rnorm(1,0))
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0) + (lambda*x))
dist_long <- (dist_long + rnorm(1,0) + (lambda*x))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
return(NA)
}
avg_cliff_time <- function (n,lambda,x,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n,lambda,x)
}
return (vect)
}
avg_time <- avg_cliff_time(100,0,0,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,0,-5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,-1,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,2,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,5,20)
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,1,20) # when x = 5, the result is always 5 min.
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,1,20) # when x = 5, the result is always 5 min.
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,.1,20) # when x = 5, the result is always 5 min.
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,.1,20) # when x = 5, the result is always 5 min.
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,.1,20) # when x = 5, the result is always 5 min.
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,.1,20) # when x = 5, the result is always 5 min.
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,.1,20) # when x = 5, the result is always 5 min.
mean(avg_time, na.rm = TRUE)
avg_time <- avg_cliff_time(100,1,.1,20) # when x = 5, the result is always 5 min.
mean(avg_time, na.rm = TRUE)
