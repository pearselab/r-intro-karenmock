for (i in list) {
if (i%%5 == 0) {
print (paste0("Divisible by 5:", i))
} else {
all_less <- (2:(i-1))  #creates a vector of all numbers less than x down to 2
mod_test <- (i%%all_less) #creates a vector of modulos, if not prime, one or more will be 0
if (0 %in% mod_test == TRUE) {
print (paste0("Prime: ", i))
} else {
print (i) # added to see numbers in neither category
}
}
}
list <- 1:20
for (i in list) {
if (i%%5 == 0) {
print (paste0("Divisible by 5:", i))
} else {
all_less <- (2:(i-1))  #creates a vector of all numbers less than x down to 2
mod_test <- (i%%all_less) #creates a vector of modulos, if not prime, one or more will be 0
if (0 %in% mod_test == FALSE) {
print (paste0("Prime: ", i))
} else {
print (i) # added to see numbers in neither category
}
}
}
list <- 1:20
for (i in list) {
if (i%%5 == 0) {
print (paste0("Divisible by 5:", i))
} else {
all_less <- (2:(i-1))  #creates a vector of all numbers less than x down to 2
mod_test <- (i%%all_less) #creates a vector of modulos, if not prime, one or more will be 0
if (0 %in% mod_test == FALSE & i !=2) {
print (paste0("Prime: ", i))
} else {
print (i) # added to see numbers in neither category
}
}
}
list <- 1:20
for (i in list) {
if (i%%5 == 0) {
print (paste0("Divisible by 5:", i))
} else if (i ==2) {
print ("Prime:", i)
else {
all_less <- (2:(i-1))  #creates a vector of all numbers less than x down to 2
mod_test <- (i%%all_less) #creates a vector of modulos, if not prime, one or more will be 0
if (0 %in% mod_test == FALSE) {
print (paste0("Prime: ", i))
} else {
print (i) # added to see numbers in neither category
}
}
}
}
list <- 1:20
for (i in list) {
if(i%%5 == 0) {
print (paste0("Divisible by 5:", i))
} else if (i ==2) {
print ("Prime:", i)
} else if (i !=2) {
all_less <- (2:(i-1))  #creates a vector of all numbers less than x down to 2
mod_test <- (i%%all_less) #creates a vector of modulos, if not prime, one or more will be 0
if (0 %in% mod_test == FALSE) {
print (paste0("Prime: ", i))
} else {
print (i) # added to see numbers in neither category
}
}
}
list <- 1:20
for (i in list) {
if(i%%5 == 0) {
print (paste0("Divisible by 5:", i))
} else if (i ==2) {
print ("Prime: 2", i)
} else if (i !=2) {
all_less <- (2:(i-1))  #creates a vector of all numbers less than x down to 2
mod_test <- (i%%all_less) #creates a vector of modulos, if not prime, one or more will be 0
if (0 %in% mod_test == FALSE) {
print (paste0("Prime: ", i))
} else {
print (i) # added to see numbers in neither category
}
}
}
GompFun <- function (a,b,c,d) { # a,b,c = constants, d = # time steps
pop_vector <- numeric(d) # creates a vector of 30 zeros
color <- rep("black",d)
for (i in 1:d) {
pop_vector [i] <- a*exp(-b*exp(-c*i))
if (pop_vector[i] > b) {
color[i] <- "red"  #now the color vector will have a mix of black and red
}
}
plot(1:d, pop_vector, col = color)
}
GompFun(280,100,.4,30)
txtbox <- function(w,h,t) {
top <- c(rep("*",w),"\n")
cat(top) # print top line
linesover <- (round(h/2,0))-3 # number of lines to go above text
linesunder <- h-linesover-4
leftsp <- round((w-2-nchar(t))/2) # spaces between * and text to left
rightsp <- w-leftsp-nchar(t)-1 # spaces between text and text to right
if (w < (nchar(t)+4)) {
print (noquote("ERROR:box width too small for text"))
}
for (i in 1:linesover) {  # print lines over text
cat("*",c(rep(" ",(w-2)),"*","\n"))
}
cat("*",rep(" ",leftsp),noquote(t),rep(" ",rightsp),"*","\n")
for (i in 1:linesunder) { # print lines under text
cat("*",c(rep(" ",(w-2)),"*","\n"))
}
cat(top) # print top line
}
txtbox (8,6,"txt")
txtbox (10,15, "txt")
txtbox (5,3,"txt")
txtbox(8,8, "txt")
sp_ab <- function (num_sites, prob_pres, lambda) {  # only got after seeing Carol's code
if (rbinom(1,1,prob_pres) == 1) {  # determines if species is present (1) or absent (!1) at a site
abundance <- rpois (num_sites, lambda)
return (abundance)
} else {
print ("Species Not Present")
}
}
sp_ab(5,.5,5)
sp_ab <- function (num_sites, prob_pres, lambda) {  # only got after seeing Carol's code
if (rbinom(1,1,prob_pres) == 1) {  # determines if species is present (1) or absent (!1) at a site
abundance <- rpois (num_sites, lambda)
return (abundance)
} else {
print ("Species Not Present")
}
}
sp_ab(5,.5,5)
sp_ab <- function (num_sites, prob_pres, lambda) {  # only got after seeing Carol's code
if (rbinom(1,1,prob_pres) == 1) {  # determines if species is present (1) or absent (!1) at a site
abundance <- rpois (num_sites, lambda)
return (abundance)
} else {
print ("Species Not Present")
}
}
sp_ab(5,.5,5)
sp_ab <- function (num_sites, prob_pres, lambda) {  # only got after seeing Carol's code
if (rbinom(1,1,prob_pres) == 1) {  # determines if species is present (1) or absent (!1) at a site
abundance <- rpois (num_sites, lambda)
return (abundance)
} else {
print ("Species Not Present")
}
}
sp_ab(5,.5,5)
sp_ab <- function (num_sites, prob_pres, lambda) {  # only got after seeing Carol's code
if (rbinom(1,1,prob_pres) == 1) {  # determines if species is present (1) or absent (!1) at a site
abundance <- rpois (num_sites, lambda)
return (abundance)
} else {
print ("Species Not Present")
}
}
sp_ab(5,.5,5)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
}
plot (lat_vector, long_vector, type = "l")
}
wandering(100)
l2 <- 4
l2
t <- numeric(1:5)
t <- numeric(5)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
}
}
wandering(100)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
}
}
wandering(100)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
}
}
wandering(100)
avg_cliff_time <- function (n,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n)
}
return(vect)
}
avg_cliff_time(100,20)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
}
}
wandering(100)
avg_cliff_time <- function (n,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n)
}
return(vect)
}
avg_cliff_time(100,20)
wandering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
next
}
}
avg_cliff_time <- function (n,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering2(n)
}
return(vect)
}
avg_cliff_time(100,20)
avg_cliff_time <- function (n,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering2(n)
}
return(vect)
}
avg_cliff_time(100,20)
wandering2(100)
wandering2(100)
wandering2(100)
wandering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
return()
}
}
wandering2(100)
wandering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
t<-t+1
return()
}
}
wandering2(100)
andering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate, this is the counter for time increments
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
t<-t+1
return()
}
}
wandering2(100)
andering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate, this is the counter for time increments
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
t<-t+1
return()
}
}
wandering2(100)
andering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate, this is the counter for time increments
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
t<-t+1
return()
}
}
wandering2(100)
andering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate, this is the counter for time increments
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
t<-t+1
return()
}
}
wandering2(100)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
}
plot (lat_vector, long_vector, type = "l")
}
wandering(100)
