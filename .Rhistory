if (rbinom(1,1,prob_pres) == 1) {  # determines if species is present (1) or absent (!1) at a site
abundance <- rpois (num_sites, lambda)
return (abundance)
} else {
print ("Species Not Present")
}
}
sp_ab(5,.5,5)
sp_ab <- function (num_sites, prob_pres, lambda) {  # only got after seeing Carol's code
if (rbinom(1,1,prob_pres) == 1) {  # determines if species is present (1) or absent (!1) at a site
abundance <- rpois (num_sites, lambda)
return (abundance)
} else {
print ("Species Not Present")
}
}
sp_ab(5,.5,5)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
}
plot (lat_vector, long_vector, type = "l")
}
wandering(100)
l2 <- 4
l2
t <- numeric(1:5)
t <- numeric(5)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
}
}
wandering(100)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
}
}
wandering(100)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
}
}
wandering(100)
avg_cliff_time <- function (n,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n)
}
return(vect)
}
avg_cliff_time(100,20)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
}
}
wandering(100)
avg_cliff_time <- function (n,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n)
}
return(vect)
}
avg_cliff_time(100,20)
wandering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
next
}
}
avg_cliff_time <- function (n,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering2(n)
}
return(vect)
}
avg_cliff_time(100,20)
avg_cliff_time <- function (n,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering2(n)
}
return(vect)
}
avg_cliff_time(100,20)
wandering2(100)
wandering2(100)
wandering2(100)
wandering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
return()
}
}
wandering2(100)
wandering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
t<-t+1
return()
}
}
wandering2(100)
andering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate, this is the counter for time increments
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
t<-t+1
return()
}
}
wandering2(100)
andering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate, this is the counter for time increments
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
t<-t+1
return()
}
}
wandering2(100)
andering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate, this is the counter for time increments
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
t<-t+1
return()
}
}
wandering2(100)
andering2 <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate, this is the counter for time increments
if (t < n) {  #this is a problem if it never goes off the cliff within n iterations
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
print(dist_lat)
print(dist_long)
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
break
}
} else {
t<-t+1
return()
}
}
wandering2(100)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
}
plot (lat_vector, long_vector, type = "l")
}
wandering(100)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
}
plot (lat_vector, long_vector, type = "l")
}
wandering(100)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
lat_vector <- c() #to set as vector
long_vector <- c()
t <-0 # to initiate
while (t < n) {
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
lat_vector <- c(lat_vector, dist_lat) # need 2 difft vars for lat since dist_lat is the new position and lat_vector is the vector
long_vector <- c(long_vector, dist_long)
t <- t+1
}
plot (lat_vector, long_vector, type = "l")
}
wandering(100)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
print(dist_lat)
print(dist_long)
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
print(dist_lat)
print(dist_long)
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
#The faculty member has not wandered off the cliff in the time allotted
# - this fixes the error
return(NA)
}
wandering(100)
avg_cliff_time <- function (n,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n)
}
return(vect)
}
avg_cliff_time(100,20)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
print(dist_lat)
print(dist_long)
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
#The faculty member has not wandered off the cliff in the time allotted
# - this fixes the error
return(NA)
}
wandering(100)
avg_cliff_time <- function (n,nsims){ # function to take the avg of nsims reps
vect <- numeric(nsims) #pre-allocation
for (i in 1:nsims) {
vect[i] <- wandering(n)
}
return(vect)
}
avg_cliff_time(100,20)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
print(dist_lat)
print(dist_long)
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
#The faculty member has not wandered off the cliff in the time allotted
# - this fixes the error
return(NA)
}
wandering(100)
wandering <- function (n) { # n = number of 5-min iterations to test
dist_lat <- 0
dist_long <- 0
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
print(dist_lat)
print(dist_long)
# I have changed this to a for loop: notice how I don't have to manually update t now
for (t in 1:n) {
dist_lat <- (dist_lat + rnorm(1,0)) # presume 1 km sd; default sd = 1
dist_long <- (dist_long + rnorm(1,0))
# I have removed lat_vector and long_vector as you werent using them in any calculations
if (dist_lat > 1.6 | dist_long >1.6) {
#cat ("Time to cliff is", t*5, "minutes")
time <- (t*5)
return(time)
}
}
